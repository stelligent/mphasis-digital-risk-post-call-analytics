AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Transcribe Post Call Analytics - PCA Server - S3 Trigger

Transform: AWS::Serverless-2016-10-31

Parameters:

  Boto3Layer:
    Type: String

  PyUtilsLayer:
    Type: String

  PreloadBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: PreloadBucketName

  PreloadObjectKeyRegex:
    Type: AWS::SSM::Parameter::Value<String>
    Default: PreloadObjectKeyRegex

  InputBucketName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: InputBucketName

Globals:
  Function:
    Runtime: python3.11
    MemorySize: 128
    Timeout: 15

Resources:
  PreloadTrigger:
    Type: "AWS::Serverless::Function"
    Properties:
      Environment:
        Variables:
          PRELOAD_OBJECT_KEY_REGEX: !Ref PreloadObjectKeyRegex
      CodeUri:  ../../src/pca
      Handler: pca-aws-preload-trigger.lambda_handler
      Layers:
        - !Ref PyUtilsLayer
      Policies:
      - Statement:
        - Sid: S3BucketReadPolicy
          Effect: Allow
          Action:
          - s3:ListBucket
          - s3:GetObject
          Resource:
          - !Sub arn:aws:s3:::${PreloadBucketName}
          - !Sub arn:aws:s3:::${PreloadBucketName}/*
          - !Sub arn:aws:s3:::${InputBucketName}
          - !Sub arn:aws:s3:::${InputBucketName}/*
      - Statement:
        - Sid: S3BucketWritePolicy
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - !Sub arn:aws:s3:::${InputBucketName}/*
      - Statement:
        - Sid: SSMGetParameterPolicy
          Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*


  PreloadTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PreloadTrigger
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${PreloadBucketName}

  ConfigurePreloadBucketRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: allow-s3-notification-config
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetBucketNotification
                - s3:PutBucketNotification
              Resource: !Sub arn:aws:s3:::${PreloadBucketName}

  ConfigurePreloadBucketFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:  ../../src/trigger
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt ConfigurePreloadBucketRole.Arn
      Environment:
        Variables:
          StackName: !Ref AWS::StackName

  ConfigurePreloadBucket:
    Type: "AWS::CloudFormation::CustomResource"
    DependsOn:
      - PreloadTriggerPermission
    Properties:
      ServiceToken: !GetAtt ConfigurePreloadBucketFunction.Arn
      BucketName: !Ref PreloadBucketName
      Prefix: ''
      LambdaArn: !GetAtt PreloadTrigger.Arn
      FileUpload: "true"

Outputs:

  RolesForKMSKey:
    Value: !Join
      - ', '
      - - !Sub '"${PreloadTriggerRole.Arn}"'
